#name ".//test_files//life.cl"










































 

#45 CLASS
Board inherits IO { 
 
 rows : Int;
 columns : Int;
 board_size : Int;

 size_of_board(initial : String) : Int {
   initial.length()
 };

 board_init(start : String) : SELF_TYPE {
   (let size :Int  <- size_of_board(start) in
    {
	if size = 15 then
	 {
	  rows <- 3;
	  columns <- 5;
	  board_size <- size;
	 }
	#64 ELSE
 if size = 16 then
	  {
	  rows <- 4;
	  columns <- 4;
	  board_size <- size;
	 }
	#70 ELSE
 if size = 20 then
	 {
	  rows <- 4;
	  columns <- 5;
	  board_size <- size;
	 }
	#76 ELSE
 if size = 21 then
	 {
	  rows <- 3;
	  columns <- 7;
	  board_size <- size;
	 }
	#82 ELSE
 if size = 25 then
	 {
	  rows <- 5;
	  columns <- 5;
	  board_size <- size;
	 }
	#88 ELSE
 if size = 28 then
	 {
	  rows <- 7;
	  columns <- 4;
	  board_size <- size;
	 }
	#94 ELSE
 	-- If none of the above fit, then just give 
	 {  -- the configuration of the most common board
	  rows <- 5;
	  columns <- 5;
	  board_size <- size;
	 }
	fi fi fi fi fi fi;
	self;
    }
   )
 };

};



#110 CLASS
CellularAutomaton inherits Board {
    population_map : String;
   
    init(map : String) : SELF_TYPE {
        {
            population_map <- map;
	    board_init(map);
            self;
        }
    };



   
    print() : SELF_TYPE {
        
	(let i : Int <- 0 in
	(let num : Int <- board_size in
	{
 	out_string("\n");
	 while i < num loop
           {
	    out_string(population_map.substr(i,columns));
	    out_string("\n"); 
	    i <- i + columns;
	   }
	 pool;
 	out_string("\n");
	self;
	}
	) ) 
    };
   
    num_cells() : Int {
        population_map.length()
    };
   
    cell(position : Int) : String {
	if board_size - 1 < position then
		" "
	#150 ELSE
 
        	population_map.substr(position, 1)
	fi
    };
   
 north(position : Int): String {
	if (position - columns) < 0 then
	      " "	                       
	#158 ELSE

	   cell(position - columns)
	fi
 };

 south(position : Int): String {
	if board_size < (position + columns) then
	      " "                     
	#166 ELSE

	   cell(position + columns)
	fi
 };

 east(position : Int): String {
	if (((position + 1) /columns ) * columns) = (position + 1) then
	      " "                
	#174 ELSE

	   cell(position + 1)
	fi 
 };

 west(position : Int): String {
	if position = 0 then
	      " "
	#182 ELSE
 
	   if ((position / columns) * columns) = position then
	      " "
	   #185 ELSE

	      cell(position - 1)
	fi fi
 };

 northwest(position : Int): String {
	if (position - columns) < 0 then
	      " "	                       
	#193 ELSE
  if ((position / columns) * columns) = position then
	      " "
	      #195 ELSE

		north(position - 1)
	fi fi
 };

 northeast(position : Int): String {
	if (position - columns) < 0 then
	      " "	
	#203 ELSE
 if (((position + 1) /columns ) * columns) = (position + 1) then
	      " "     
	     #205 ELSE

	       north(position + 1)
	fi fi
 };

 southeast(position : Int): String {
	if board_size < (position + columns) then
	      " "                     
	#213 ELSE
 if (((position + 1) /columns ) * columns) = (position + 1) then
	       " "                
	     #215 ELSE

	       south(position + 1)
	fi fi
 };

 southwest(position : Int): String {
	if board_size < (position + columns) then
	      " "                     
	#223 ELSE
  if ((position / columns) * columns) = position then
	      " "
	      #225 ELSE

	       south(position - 1)
	fi fi
 };

 neighbors(position: Int): Int { 
 	{
	     if north(position) = "X" then 1 #232 ELSE
 0 fi
	     + if south(position) = "X" then 1 #233 ELSE
 0 fi
 	     + if east(position) = "X" then 1 #234 ELSE
 0 fi
 	     + if west(position) = "X" then 1 #235 ELSE
 0 fi
	     + if northeast(position) = "X" then 1 #236 ELSE
 0 fi
	     + if northwest(position) = "X" then 1 #237 ELSE
 0 fi
 	     + if southeast(position) = "X" then 1 #238 ELSE
 0 fi
	     + if southwest(position) = "X" then 1 #239 ELSE
 0 fi;
	 }
 };

 


    
    cell_at_next_evolution(position : Int) : String {

	if neighbors(position) = 3 then
		"X"
	#251 ELSE

	   if neighbors(position) = 2 then
		if cell(position) = "X" then
			"X"
		#255 ELSE

			"-"
	        fi
	   #258 ELSE

		"-"
	fi fi
    };
  

    evolve() : SELF_TYPE {
        (let position : Int <- 0 in
        (let num : Int <- num_cells() in
        (let temp : String in
            {
                while position < num loop
                    {
                        temp <- temp.concat(cell_at_next_evolution(position));
                        position <- position + 1;
                    }
                pool;
                population_map <- temp;
                self;
            }
        ) ) )
    };



 
 option(): String {
 {
  (let num : Int in
   {
   out_string("\nPlease chose a number:\n");
   out_string("\t1: A cross\n"); 
   out_string("\t2: A slash from the upper left to lower right\n");
   out_string("\t3: A slash from the upper right to lower left\n"); 
   out_string("\t4: An X\n"); 
   out_string("\t5: A greater than sign \n"); 
   out_string("\t6: A less than sign\n"); 
   out_string("\t7: Two greater than signs\n"); 
   out_string("\t8: Two less than signs\n"); 
   out_string("\t9: A 'V'\n"); 
   out_string("\t10: An inverse 'V'\n"); 
   out_string("\t11: Numbers 9 and 10 combined\n"); 
   out_string("\t12: A full grid\n"); 
   out_string("\t13: A 'T'\n");
   out_string("\t14: A plus '+'\n");
   out_string("\t15: A 'W'\n");
   out_string("\t16: An 'M'\n");
   out_string("\t17: An 'E'\n");
   out_string("\t18: A '3'\n");
   out_string("\t19: An 'O'\n");
   out_string("\t20: An '8'\n");
   out_string("\t21: An 'S'\n");
   out_string("Your choice #310 DARROW
 ");
   num <- in_int();
   out_string("\n");
   if num = 1 then
    	" XX  XXXX XXXX  XX  "
   #315 ELSE
 if num = 2 then
    	"    X   X   X   X   X    "
   #317 ELSE
 if num = 3 then
    	"X     X     X     X     X"
   #319 ELSE
 if num = 4 then
	"X   X X X   X   X X X   X"
   #321 ELSE
 if num = 5 then
	"X     X     X   X   X    "
   #323 ELSE
 if num = 6 then
	"    X   X   X     X     X"
   #325 ELSE
 if num = 7 then
	"X  X  X  XX  X      "
   #327 ELSE
 if num = 8 then
	" X  XX  X  X  X     "
   #329 ELSE
 if num = 9 then
	"X   X X X   X  "
   #331 ELSE
 if num = 10 then
	"  X   X X X   X"
   #333 ELSE
 if num = 11 then
	"X X X X X X X X"
   #335 ELSE
 if num = 12 then
	"XXXXXXXXXXXXXXXXXXXXXXXXX"
   #337 ELSE
 if num = 13 then
    	"XXXXX  X    X    X    X  "
   #339 ELSE
 if num = 14 then
    	"  X    X  XXXXX  X    X  "
   #341 ELSE
 if num = 15 then
    	"X     X X X X   X X  "
   #343 ELSE
 if num = 16 then
    	"  X X   X X X X     X"
   #345 ELSE
 if num = 17 then
	"XXXXX   X   XXXXX   X   XXXX"
   #347 ELSE
 if num = 18 then
	"XXX    X   X  X    X   XXXX "
   #349 ELSE
 if num = 19 then
	" XX X  XX  X XX "
   #351 ELSE
 if num = 20 then
	" XX X  XX  X XX X  XX  X XX "
   #353 ELSE
 if num = 21 then
	" XXXX   X    XX    X   XXXX "
   #355 ELSE

	"                         "
  fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi;
    }
   );
 }
 };




 prompt() : Bool { 
 {
  (let ans : String in
   {
   out_string("Would you like to continue with the next generation? \n");
   out_string("Please use lowercase y or n for your answer [y]: ");
   ans <- in_string();
   out_string("\n");
   if ans = "n" then 
	false
   #376 ELSE

	true
   fi;
   }
  );
 }
 };


 prompt2() : Bool { 
  (let ans : String in
   {
   out_string("\n\n");
   out_string("Would you like to choose a background pattern? \n");
   out_string("Please use lowercase y or n for your answer [n]: ");
   ans <- in_string();
   if ans = "y" then 
	true
   #394 ELSE

	false
   fi;
   }
  )
 };


};

#404 CLASS
Main inherits CellularAutomaton {
    cells : CellularAutomaton;
   
    main() : SELF_TYPE {
        {
	 (let continue : Bool  in
	  (let choice : String  in
	   {
	   out_string("Welcome to the Game of Life.\n");
	   out_string("There are many initial states to choose from. \n");
	   while prompt2() loop
	    {
	     continue <- true;
	     choice <- option();
	     cells <- (new CellularAutomaton).init(choice);
	     cells.print();
             while continue loop
		if prompt() then
                    {
                        cells.evolve();
                        cells.print();
                    }
		#426 ELSE

		    continue <- false
	      fi 
                pool;
            }
            pool;
	    self;
      }  ) ); }
    };
};

