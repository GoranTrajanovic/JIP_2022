#name ".//test_files//arith.cl"






#7 CLASS
A {

   var : Int <- 0;

   value() : Int { var };

   set_var(num : Int) : SELF_TYPE {
      {
         var <- num;
         self;
      }
   };

   method1(num : Int) : SELF_TYPE {  -- same
      self
   };

   method2(num1 : Int, num2 : Int) : B {  -- plus
      (let x : Int in
	 {
            x <- num1 + num2;
	    (new B).set_var(x);
	 }
      )
   };

   method3(num : Int) : C {  -- negate
      (let x : Int in
	 {
            x <- ~num;
	    (new C).set_var(x);
	 }
      )
   };

   method4(num1 : Int, num2 : Int) : D {  -- diff
            if num2 < num1 then
               (let x : Int in
		  {
                     x <- num1 - num2;
	             (new D).set_var(x);
	          }
               )
            #50 ELSE

               (let x : Int in
		  {
	             x <- num2 - num1;
	             (new D).set_var(x);
		  }
               )
            fi
   };

   method5(num : Int) : E {  -- factorial
      (let x : Int <- 1 in
	 {
	    (let y : Int <- 1 in
	       while y <= num loop
	          {
                     x <- x * y;
	             y <- y + 1;
	          }
	       pool
	    );
	    (new E).set_var(x);
	 }
      )
   };

};

#78 CLASS
B inherits A {  -- B is a number squared

   method5(num : Int) : E { -- square
      (let x : Int in
	 {
            x <- num * num;
	    (new E).set_var(x);
	 }
      )
   };

};

#91 CLASS
C inherits B {

   method6(num : Int) : A { -- negate
      (let x : Int in
         {
            x <- ~num;
	    (new A).set_var(x);
         }
      )
   };

   method5(num : Int) : E {  -- cube
      (let x : Int in
	 {
            x <- num * num * num;
	    (new E).set_var(x);
	 }
      )
   };

};

#113 CLASS
D inherits B {  
		
   method7(num : Int) : Bool {  -- divisible by 3
      (let x : Int <- num in
            if x < 0 then method7(~x) #117 ELSE

            if 0 = x then true #118 ELSE

            if 1 = x then false #119 ELSE

	    if 2 = x then false #120 ELSE

	       method7(x - 3)
	    fi fi fi fi
      )
   };

};

#128 CLASS
E inherits D {

   method6(num : Int) : A {  -- division
      (let x : Int in
         {
            x <- num / 8;
	    (new A).set_var(x);
         }
      )
   };

};















#155 CLASS
A2I {

     c2i(char : String) : Int {
	if char = "0" then 0 #158 ELSE

	if char = "1" then 1 #159 ELSE

	if char = "2" then 2 #160 ELSE

        if char = "3" then 3 #161 ELSE

        if char = "4" then 4 #162 ELSE

        if char = "5" then 5 #163 ELSE

        if char = "6" then 6 #164 ELSE

        if char = "7" then 7 #165 ELSE

        if char = "8" then 8 #166 ELSE

        if char = "9" then 9 #167 ELSE

        { abort(); 0; }  

        fi fi fi fi fi fi fi fi fi fi
     };




     i2c(i : Int) : String {
	if i = 0 then "0" #177 ELSE

	if i = 1 then "1" #178 ELSE

	if i = 2 then "2" #179 ELSE

	if i = 3 then "3" #180 ELSE

	if i = 4 then "4" #181 ELSE

	if i = 5 then "5" #182 ELSE

	if i = 6 then "6" #183 ELSE

	if i = 7 then "7" #184 ELSE

	if i = 8 then "8" #185 ELSE

	if i = 9 then "9" #186 ELSE

	{ abort(); ""; }  -- the "" is needed to satisfy the typchecker
        fi fi fi fi fi fi fi fi fi fi
     };









     a2i(s : String) : Int {
        if s.length() = 0 then 0 #200 ELSE

	if s.substr(0,1) = "-" then ~a2i_aux(s.substr(1,s.length()-1)) #201 ELSE

        if s.substr(0,1) = "+" then a2i_aux(s.substr(1,s.length()-1)) #202 ELSE

           a2i_aux(s)
        fi fi fi
     };





     a2i_aux(s : String) : Int {
	(let int : Int <- 0 in	
           {	
               (let j : Int <- s.length() in
	          (let i : Int <- 0 in
		    while i < j loop
			{
			    int <- int * 10 + c2i(s.substr(i,1));
			    i <- i + 1;
			}
		    pool
		  )
	       );
              int;
	    }
        )
     };




    i2a(i : Int) : String {
	if i = 0 then "0" #233 ELSE
 
        if 0 < i then i2a_aux(i) #234 ELSE

          "-".concat(i2a_aux(i * ~1)) 
        fi fi
    };
	
		

    i2a_aux(i : Int) : String {
        if i = 0 then "" #242 ELSE
 
	    (let next : Int <- i / 10 in
		i2a_aux(next).concat(i2c(i - next * 10))
	    )
        fi
    };

};

#251 CLASS
Main inherits IO {
   
   char : String;
   avar : A; 
   a_var : A;
   flag : Bool <- true;


   menu() : String {
      {
         out_string("\n\tTo add a number to ");
         print(avar);
         out_string("...enter a:\n");
         out_string("\tTo negate ");
         print(avar);
         out_string("...enter b:\n");
         out_string("\tTo find the difference between ");
         print(avar);
         out_string("and another number...enter c:\n");
         out_string("\tTo find the factorial of ");
         print(avar);
         out_string("...enter d:\n");
         out_string("\tTo square ");
         print(avar);
         out_string("...enter e:\n");
         out_string("\tTo cube ");
         print(avar);
         out_string("...enter f:\n");
         out_string("\tTo find out if ");
         print(avar);
         out_string("is a multiple of 3...enter g:\n");
         out_string("\tTo divide ");
         print(avar);
         out_string("by 8...enter h:\n");
	 out_string("\tTo get a new number...enter j:\n");
	 out_string("\tTo quit...enter q:\n\n");
         in_string();
      }
   };

   prompt() : String {
      {
         out_string("\n");
         out_string("Please enter a number...  ");
         in_string();
      }
   };

   get_int() : Int {
      {
	 (let z : A2I <- new A2I in
	    (let s : String <- prompt() in
	       z.a2i(s)
	    )
         );
      }
   };

   is_even(num : Int) : Bool {
      (let x : Int <- num in
            if x < 0 then is_even(~x) #311 ELSE

            if 0 = x then true #312 ELSE

	    if 1 = x then false #313 ELSE

	          is_even(x - 2)
	    fi fi fi
      )
   };

   class_type(var : A) : SELF_TYPE {
      case var of
	 a : A #321 DARROW
 out_string("Class type is now A\n");
	 b : B #322 DARROW
 out_string("Class type is now B\n");
	 c : C #323 DARROW
 out_string("Class type is now C\n");
	 d : D #324 DARROW
 out_string("Class type is now D\n");
	 e : E #325 DARROW
 out_string("Class type is now E\n");
	 o : Object #326 DARROW
 out_string("Oooops\n");
      esac
   };
 
   print(var : A) : SELF_TYPE {
     (let z : A2I <- new A2I in
	{
	   out_string(z.i2a(var.value()));
	   out_string(" ");
	}
     )
   };

   main() : Object {
      {
         avar <- (new A);
         while flag loop
            {
	       -- avar <- (new A).set_var(get_int());
	       out_string("number ");
	       print(avar);
	       if is_even(avar.value()) then
	          out_string("is even!\n")
	       #349 ELSE

	          out_string("is odd!\n")
	       fi;
	       -- print(avar); -- prints out answer
	       class_type(avar);
	       char <- menu();
                  if char = "a" then -- add
                     {
                        a_var <- (new A).set_var(get_int());
	                avar <- (new B).method2(avar.value(), a_var.value());
	             } #359 ELSE

                  if char = "b" then -- negate
                     case avar of
	                   c : C #362 DARROW
 avar <- c.method6(c.value());
	                   a : A #363 DARROW
 avar <- a.method3(a.value());
	                   o : Object #364 DARROW
 {
		                  out_string("Oooops\n");
		                  abort(); 0;
		               };
                     esac #368 ELSE

                  if char = "c" then -- diff
                     {
                        a_var <- (new A).set_var(get_int());
	                avar <- (new D).method4(avar.value(), a_var.value());
	             } #373 ELSE

                  if char = "d" then avar <- (new C)@A.method5(avar.value()) #374 ELSE

		          -- factorial
                  if char = "e" then avar <- (new C)@B.method5(avar.value()) #376 ELSE

			  -- square
                  if char = "f" then avar <- (new C)@C.method5(avar.value()) #378 ELSE

			  -- cube
                  if char = "g" then -- multiple of 3?
		      if ((new D).method7(avar.value()))
		                       then -- avar <- (new A).method1(avar.value())
			 {
	                    out_string("number ");
	                    print(avar);
	                    out_string("is divisible by 3.\n");
			 }
			 #388 ELSE
  -- avar <- (new A).set_var(0)
			 {
	                    out_string("number ");
	                    print(avar);
	                    out_string("is not divisible by 3.\n");
			 }
		      fi #394 ELSE

                  if char = "h" then 
		      (let x : A in
			 {
		            x <- (new E).method6(avar.value());
			    (let r : Int <- (avar.value() - (x.value() * 8)) in
			       {
			          out_string("number ");
			          print(avar);
			          out_string("is equal to ");
			          print(x);
			          out_string("times 8 with a remainder of ");
				  (let a : A2I <- new A2I in
				     {
			                out_string(a.i2a(r));
			                out_string("\n");
				     }
				  ); -- end let a:
			       }
                            ); -- end let r:
			    avar <- x;
		         } 
		      )  -- end let x:
		      #417 ELSE

                  if char = "j" then avar <- (new A)
		      #419 ELSE

                  if char = "q" then flag <- false
		      #421 ELSE

                      avar <- (new A).method1(avar.value()) -- divide/8
                  fi fi fi fi fi fi fi fi fi fi;
            }
         pool;
       }
   };

};

